#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'overlord_quote.rb'

class App
  DEFAULT_AFTER_SENTENCES = 5

  include Methadone::Main
  include Methadone::CLILogging
  include OverlordQuote

  main do |search_term|
    after_sentences = options.fetch(:A) { DEFAULT_AFTER_SENTENCES }
    print_quote_from_previous_call = options[:last]

    volume = ENV["OVERLORD_TEXT"]

    @sentences = Sentences.new volume

    if print_quote_from_previous_call
      search_term, matching_sentence_id =
        History.load_context_from_previous_call
      info "Searching for \"#{search_term}\""
    end

    @matching_sentences = MatchingSentences.new search_term, @sentences
    raise "No matching sentences found" if @matching_sentences.empty?

    @matching_sentence = matching_sentence_id ?
      @matching_sentences[matching_sentence_id] :
      @matching_sentences.random_sentence

    puts "Total matching sentences: #{@matching_sentences.size}"
    puts "Matching sentence id: #{@matching_sentence.id} (out of #{@matching_sentences.size})"
    puts

    puts quote(after_sentences)

    History.save_context search_term, @matching_sentence.id
  end

  # supplemental methods here

  def self.quote(after_sentences)
    @sentences.quote(
      starting_sentence: @matching_sentence.orig_sentence,
      after_sentences: after_sentences)
  end

  # Declare command-line interface here

  description "Print a random quote from Overlord light novel"

  arg :search_term, :optional
  on("-A", "--after-context=NUM", Integer,
          "Print NUM sentences after the matching sentence (DEFAULT: #{DEFAULT_AFTER_SENTENCES})")
  on("--last", TrueClass, "Print the quote from the previous call")

  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version OverlordQuote::VERSION

  use_log_level_option :toggle_debug_on_signal => 'USR1'

  go!
end
