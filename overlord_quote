#!/usr/bin/env ruby

Sentence = Struct.new(:id, :text) do
  def to_s
    text
  end
end

class Sentences
  TOTAL_SENTENCES_TO_SHOW = 6
  SENTENCE_REGEX = /(?:^|\.\s*)(?:\s*)([A-Z][^.]+\.)/m

  include Enumerable

  def initialize(text_file)
    text = File.read text_file
    @sentences = text.scan(SENTENCE_REGEX).flatten

    @sentences = @sentences.each_with_index.map do |sentence, id|
      Sentence.new id, sentence
    end
  end

  def each(&b)
    @sentences.each &b
  end

  def quote(starting_sentence:)
    format_quote \
      @sentences.slice(starting_sentence.id,
                       TOTAL_SENTENCES_TO_SHOW).join(" ")
  end

  private

  def format_quote(quote)
    remove_line_breaks quote
  end

  def remove_line_breaks(text)
    text.gsub("\n", " ").chomp
  end
end

class MatchingSentence
  attr_reader :id, :sentence

  def initialize(id, sentence)
    @id, @sentence = id, sentence
  end

  def orig_sentence
    @sentence
  end
end

class MatchingSentences
  def initialize(search_term, sentences)
    @search_term, @sentences = search_term, sentences
    @matching_sentences = filter_sentences
  end

  def size
    @matching_sentences.size
  end

  def random_sentence
    MatchingSentence.new random_index, @matching_sentences[random_index]
  end

  private

  def random_index
    @random_index ||= rand @matching_sentences.size
  end

  def filter_sentences
    return @sentences.dup unless @search_term

    @sentences.find_all do |sentence|
      sentence.text =~ /#{@search_term}/i
    end
  end
end

def random_quote
  @sentences.quote(
    starting_sentence: @random_matching_sentence.orig_sentence)
end

volume = ENV["OVERLORD_TEXT"]
search_term = ARGV[0]

@sentences = Sentences.new volume
@matching_sentences = MatchingSentences.new search_term, @sentences
@random_matching_sentence = @matching_sentences.random_sentence

puts "Total matching sentences: #{@matching_sentences.size}"
puts "Matching sentence id: #{@random_matching_sentence.id} (out of #{@matching_sentences.size})"
puts

puts random_quote
